<?php

/**
 * @file
 * Contains wilmap_contributors.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormState;

define('WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM',
  'wilmap_contributors_to_country');
define('WILMAP_CONTRIBUTORS_TO_REGION_REALM', 'wilmap_contributors_to_region');
define('WILMAP_CONTRIBUTORS_TO_TOPICS_REALM', 'wilmap_contributors_to_topic');
define('WILMAP_CONTRIBUTORS_ADMIN_REALM', 'wilmap_admin');
define('WILMAP_CONTRIBUTORS_ANONYMOUS_REALM', 'wilmap_anonymous');
define('WILMAP_CONTRIBUTORS_AUTHENTICATED_REALM', 'wilmap_authenticated');
define('WILMAP_CONTRIBUTORS_OWNER_REALM', 'wilmap_owner');

/**
 * Implements hook_help().
 */
function wilmap_contributors_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        // Main module help for the wilmap_contributors module.
        case 'help.page.wilmap_contributors':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('WILMap Contributors features') . '</p>';
            return $output;

        default:
    }
}

/******************************************************************************/
/* ACCESS                                                                     */
/******************************************************************************/

/**
 * Implements hook_node_access_records().
 *
 * Set permissions for a node to be written to the database.
 */
function wilmap_contributors_node_access_records(NodeInterface $node)
{
    $grants = [];

    $type = $node->getType();


    // Adds Contributors grants/keys
    switch ($type) {

        case 'topics':
            // If Topics adds a WILMAP_CONTRIBUTORS_TO_TOPICS_REALM
            // record using topic nid as gid
            $grants[] = array(
              'realm'        => WILMAP_CONTRIBUTORS_TO_TOPICS_REALM,
              'gid'          => $node->id(),
              'grant_view'   => (int)$node->isPublished(),
              'grant_update' => 1,
              'grant_delete' => 1
            );
            break;

        case 'country':
            // If Country  adds a WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM
            // record using country nid as gid
            $grants[] = array(
              'realm'        => WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM,
              'gid'          => $node->id(),
              'grant_view'   => (int)$node->isPublished(),
              'grant_update' => 1,
              'grant_delete' => 1
            );
            break;

        case 'region':

            // If Region adds a WILMAP_CONTRIBUTORS_TO_REGION_REALM
            // record using region nid as gid
            $grants[] = array(
              'realm'        => WILMAP_CONTRIBUTORS_TO_REGION_REALM,
              'gid'          => $node->id(),
              'grant_view'   => (int)$node->isPublished(),
              'grant_update' => 1,
              'grant_delete' => 1
            );
            break;

        case 'entry':
            // If Entry then adds a WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM / WILMAP_CONTRIBUTORS_TO_REGION_REALM
            // record using country/region from field_location_entry as gid
            // Get country nids from field_location_entry
            foreach ($node->field_location_entry->getValue() as $delta => $value) {
                $grants[] = array(
                  'realm'        => WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM,
                  'gid'          => $value['target_id'],
                  'grant_view'   => (int)$node->isPublished(),
                  'grant_update' => 1,
                  'grant_delete' => 1
                );
            }
            // Get region nids from field_region
            foreach ($node->field_region->getValue() as $delta => $value) {
                $grants[] = array(
                  'realm'        => WILMAP_CONTRIBUTORS_TO_REGION_REALM,
                  'gid'          => $value['target_id'],
                  'grant_view'   => (int)$node->isPublished(),
                  'grant_update' => 1,
                  'grant_delete' => 1
                );
            }
            break;

        case 'news':
            // If News then adds a WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM / WILMAP_CONTRIBUTORS_TO_REGION_REALM
            // record using country/region from field_location as gid
            // Get country nids from field_location_entry
            foreach ($node->field_location->getValue() as $delta => $value) {
                $grants[] = array(
                  'realm'        => WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM,
                  'gid'          => $value['target_id'],
                  'grant_view'   => (int)$node->isPublished(),
                  'grant_update' => 1,
                  'grant_delete' => 1
                );
            }
            // Get region nids from field_region
            foreach ($node->field_region->getValue() as $delta => $value) {
                $grants[] = array(
                  'realm'        => WILMAP_CONTRIBUTORS_TO_REGION_REALM,
                  'gid'          => $value['target_id'],
                  'grant_view'   => (int)$node->isPublished(),
                  'grant_update' => 1,
                  'grant_delete' => 1
                );
            }
            break;

        default:

    }

    // Add grant/key for admins
    $grants[] = array(
      'realm'        => WILMAP_CONTRIBUTORS_ADMIN_REALM,
      'gid'          => 0,
      'grant_view'   => (int)$node->isPublished(),
      'grant_update' => 1,
      'grant_delete' => 1
    );

    //    Not needed, core checks owner permission, presumably in hook_node_access()
//    // Add grant/key for owners with owner uid as gid
//    $grants[] = array(
//      'realm'        => WILMAP_CONTRIBUTORS_OWNER_REALM,
//      'gid'          => $node->getOwnerId(),
//      'grant_view'   => (int) $node->isPublished(),
//      'grant_update' => 1,
//      'grant_delete' => 1
//    );

    // Add grant/key for authenticated
    $grants[] = array(
      'realm'        => WILMAP_CONTRIBUTORS_AUTHENTICATED_REALM,
      'gid'          => 0,
      'grant_view'   => (int)$node->isPublished(),
      'grant_update' => 0,
      'grant_delete' => 0
    );

    // Add grant/key for anonymous
    $grants[] = array(
      'realm'        => WILMAP_CONTRIBUTORS_ANONYMOUS_REALM,
      'gid'          => 0,
      'grant_view'   => (int)$node->isPublished(),
      'grant_update' => 0,
      'grant_delete' => 0
    );

    return $grants;
}


/**
 * Implements hook_node_grants().
 *
 * Inform the node access system what permissions the user has.
 */
function wilmap_contributors_node_grants(AccountInterface $account, $op)
{
    $grants = array();

    // If user has administrator role give user Admin grant/key
    if (in_array('administrator', $account->getRoles())) {
        // gid to view, update, delete
        $grants[WILMAP_CONTRIBUTORS_ADMIN_REALM][] = 0;

        // Return as admin has all privileges
        return $grants;
    }

//    Not needed, core checks owner permission, presumably in hook_node_access()
//    // Add user owner grant/key, may match a record
//    if ($account->id() != 0) {
//        $grants[WILMAP_CONTRIBUTORS_OWNER_REALM][] = $account->id();
//    }

    // Grants for Country and Region Contributors
    if (in_array('contributors', $account->getRoles())) {

        $user = \Drupal::entityTypeManager()
          ->getStorage('user')
          ->load($account->id());

        // Give contributor all her countries grants/keys
        foreach ($user->field_country->getValue() as $delta => $value) {
            $grants[WILMAP_CONTRIBUTORS_TO_COUNTRY_REALM][] = $value['target_id'];
        }

        // Give contributor all her regions grants/keys
        foreach ($user->field_region->getValue() as $delta => $value) {
            $grants[WILMAP_CONTRIBUTORS_TO_REGION_REALM][] = $value['target_id'];
        }
    }

    // If user has authenticated role give user Authenticated grant/key
    if (in_array('authenticated', $account->getRoles())) {
        $grants[WILMAP_CONTRIBUTORS_AUTHENTICATED_REALM][] = 0;
        return $grants;
    }

    // If user has anonymous role give user Anonymous grant/key
    if (in_array('anonymous', $account->getRoles())) {
        $grants[WILMAP_CONTRIBUTORS_ANONYMOUS_REALM][] = 0;
    }

    return $grants;
}


/******************************************************************************/
/* ALTERS                                                                     */
/******************************************************************************/

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * @see https://www.drupal.org/docs/8/api/entity-validation-api/providing-a-custom-validation-constraint
 * @see https://www.drupalwatchdog.com/volume-5/issue-2/introducing-drupal-8s-entity-validation-api
 * @see https://lakshminp.com/entity-validation-drupal-8-part-2
 */
function wilmap_contributors_entity_bundle_field_info_alter(
  &$fields,
  \Drupal\Core\Entity\EntityTypeInterface $entity_type,
  $bundle
) {

    // News
    if ($entity_type->id() == 'node' && $bundle === 'news') {
        // Adds 'allowed_country' constraint to field_location field in Entry
        if (isset($fields['field_location'])) {
            $fields['field_location']->addConstraint('allowed_country', []);
        }
        // Adds 'allowed_region' constraint to field_region field in Entry
        if (isset($fields['field_region'])) {
            $fields['field_region']->addConstraint('allowed_region', []);
        }
    }

    // Entry
    if ($bundle === 'entry') {
        // Adds 'allowed_country' constraint to field_location_entry field in Entry
        if (isset($fields['field_location_entry'])) {
            $fields['field_location_entry']->addConstraint('allowed_country',
              []);
        }
        // Adds 'allowed_region' constraint to field_region field in Entry
        if (isset($fields['field_region'])) {
            $fields['field_region']->addConstraint('allowed_region', []);
        }
    }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wilmap_contributors_form_user_login_form_alter(
  &$form,
  FormState $form_state
) {

    $form['#submit'][] = 'wilmap_contributors_user_login_submit';
}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 */
function wilmap_contributors_user_login_submit(&$form, FormState $form_state)
{

    $account = \Drupal::currentUser();

    // Only redirect to "My workbench" if has permission
    if (!$account->hasPermission('access workbench')) {
        return;
    }

    $url = \Drupal\Core\Url::fromRoute('workbench.content');

    // Check if a destination was set, probably on an exception controller.
    // @see \Drupal\user\Form\UserLoginForm::submitForm()
    $request = \Drupal::service('request_stack')->getCurrentRequest();
    if (!$request->request->has('destination')) {
        $form_state->setRedirectUrl($url);
    } else {
        $request->query->set('destination',
          $request->request->get('destination'));
    }
}

/******************************************************************************/
/* PREPROCESS                                                                 */
/******************************************************************************/

/**
 * hook template_preprocess_user()
 */
function wilmap_contributors_preprocess_user(&$variables)
{

    $account = $variables['user'];

    $ranking_service = \Drupal::service('wilmap_contributors.ranking');
    $contributors = intval($ranking_service->getUserContributions($account->id()));
    $ranking = intval($ranking_service->getUserRanking($account->id()));

    $variables['ranking'] = ($ranking < 10 && $ranking != 0) ? '0' . $ranking : $ranking;
    $variables['contributions'] = ($contributors < 10 && $contributors != 0) ? '0' . $contributors : $contributors;

}


/**
 * Implements hook_ENTITY_TYPE_presave() for node entities.
 *
 * @param $node Drupal\node\Entity\Node
 */
function wilmap_contributors_node_presave(EntityInterface $node)
{

    // News, Entries
    if ($node->getType() == "news" || $node->getType() == "entry") {

        // Get all node Contributors
        $test = $node->field_contributors->getValue();

        // Adds author to field_contributors if not exist excluding uid=1, already has all permissions
        if ($node->getOwnerId() != 1 && !array_search($node->getOwnerId(),
            array_column($test, 'target_id'))) {
            // Add author with status not visible
            $node->field_contributors[] = [
              'target_id' => $node->getOwnerId(),
              'status'    => 0
            ];
        }

    }
}


/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 *
 * @param $entity Drupal\Core\Entity\EntityInterface
 */
function wilmap_contributors_node_update(
  Drupal\Core\Entity\EntityInterface $entity
) {

    // Uncomment if needed
    // Entity has contributor field
//    if ($entity->hasField('field_contributors')) {
//        wilmap_contributors_mail_notity_new_contributors($entity);
//    }

}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 *
 * @param $entity Drupal\Core\Entity\EntityInterface
 */
function wilmap_contributors_node_insert(
  Drupal\Core\Entity\EntityInterface $entity
) {

    // Uncomment if needed
    // Entity has contributor field
//    if ($entity->hasField('field_contributors')) {
//        wilmap_contributors_mail_notity_new_contributors($entity);
//    }

}

/******************************************************************************/
/* MAILS                                                                      */
/******************************************************************************/
// http://drupaldeveloper.in/codelet/drupal8-send-e-mail-after-node-creating

/**
 * Implements hook_mail().
 */
function wilmap_contributors_mail($key, &$message, $params)
{
    $options = array(
      'langcode' => $message['langcode'],
    );

    switch ($key) {
        case 'notify_new_contributors_topic':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('You have been invited to contribute to @item',
              array('@item' => $params['node_title']), $options);
            //$message['body'][] = SafeMarkup::checkPlain($params['message']);v
            $message['body'][] = t('Congrats! You are now a contributor of %title, so you can edit this topic page.',
              array('%title' => $params['node_title']), $options);
            break;
        case 'notify_new_contributors_country':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('You have been invited to contribute to @item',
              array('@item' => $params['node_title']), $options);
            //$message['body'][] = SafeMarkup::checkPlain($params['message']);
            $message['body'][] = t('Congrats! You are now a contributor of %title, so you can edit this country page and publish related Entries and News.',
              array('%title' => $params['node_title']), $options);
            break;
        case 'notify_new_contributors_region':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('You have been invited to contribute to @item',
              array('@item' => $params['node_title']), $options);
            //$message['body'][] = SafeMarkup::checkPlain($params['message']);
            $message['body'][] = t('Congrats! You are now a contributor of %title, so you can edit this region page and publish related Entries and News.',
              array('%title' => $params['node_title']), $options);
            break;
        case 'notify_new_contributors_other':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('You have been invited to contribute to @item',
              array('@item' => $params['node_title']), $options);
            //$message['body'][] = SafeMarkup::checkPlain($params['message']);
            $message['body'][] = t('Congrats! You are now a contributor of %title, so you can edit its content page.',
              array('%title' => $params['node_title']), $options);
            break;
    }
}


/**
 * Mail helper function.
 */
function wilmap_contributors_mail_notity_new_contributors($entity)
{

    // Select only new contributors
    if (isset($entity->original->field_contributors)) {
        $uids = array_diff_assoc(array_column($entity->field_contributors->getValue(),
          'target_id'),
          array_column($entity->original->field_contributors->getValue(),
            'target_id'));
    } else {
        $uids = array_column($entity->field_contributors->getValue(),
          'target_id');
    }

    // Get new contributors as user entities
    $contributors = \Drupal\user\Entity\User::loadMultiple($uids);

    // Email settings
    $mailManager = \Drupal::service('plugin.manager.mail');
    $module = 'wilmap_contributors';

    switch ($entity->getType()) {
        case 'topics':
            $key = 'notify_new_contributors_topics';
            break;
        case 'country':
            $key = 'notify_new_contributors_country';
            break;
        case 'region':
            $key = 'notify_new_contributors_region';
            break;
        default:
            $key = 'notify_new_contributors_other';
    }

    $params['node_title'] = $entity->label();
    $langcode = \Drupal::currentUser()->getPreferredLangcode();
    $send = true;

    // Send email to each new contributor
    foreach ($contributors as $contributor) {

        if ($to = $contributor->getEmail()) {

            // Send email
            $result = $mailManager->mail(
              $module,
              $key,
              $to,
              $langcode,
              $params,
              null,
              $send
            );

            if ($result['result'] !== true) {

                //drupal dblog: mail sent
                \Drupal::logger('wilmap_contributors')
                  ->error('There was a problem sending email inviting @email to contribute to %title (@id).',
                    array(
                      '@email' => $to,
                      '%title' => $entity->label(),
                      '@id'    => $entity->id()
                    )
                  );
            } else {

                //drupal dblog: mail sent error
                \Drupal::logger('wilmap_contributors')
                  ->notice('An email notification has been sent to @email inviting to contribute to %title (@id).',
                    array(
                      '@email' => $to,
                      '%title' => $entity->label(),
                      '@id'    => $entity->id()
                    )
                  );
            }
        }
    }
}