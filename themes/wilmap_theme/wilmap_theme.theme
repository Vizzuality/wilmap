<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;


/**
* Implements alter form for custom theme settings.
*
*/
function wilmap_theme_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['developer_mode_css'] = array(
    '#type'          => 'checkbox',
    '#title'         => t('Developer Mode'),
    '#default_value' => theme_get_setting('developer_mode_css'),
    '#description'   => t("Check this to see regions and grid. Turn off in production environment."),
  );
}


/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function wilmap_theme_preprocess_html(&$variables) {

  // Add node id and title to the body class.
  if( $node = \Drupal::routeMatch()->getParameter('node') ) {

    // Node ID
    if(gettype($node) != 'string') {
      $variables['attributes']['class'][] = 'node-' . $node->id();
    }

    // Node Title
    $node = $node->getTranslation('en');
    $title = $node->label();
    $title = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $title));

    $variables['attributes']['class'][] = 'node-' . $title;

    // Update Report Node News
    if(stripos($title, 'updates-report') !== false) {
      $variables['attributes']['class'][] = 'updates-report';
    }

  }

  if ( theme_get_setting('developer_mode_css') ) {
    $variables['attributes']['class'][] = 'developer-mode-css';
  }

}

/**
 * Implements hook_preprocess_HOOK() for page.
 */
function wilmap_theme_preprocess_page(&$variables) {

    // Send site config info to page.html.twig
    $site_config = \Drupal::config('system.site');

    $variables['site_name'] = $site_config->get('name');
    $variables['site_slogan'] = $site_config->get('slogan');

}

/**
 * Implements hook_preprocess_HOOK() for page title.
 */
function wilmap_theme_preprocess_page_title(&$variables) {

  // Default values
  $variables['title'] = $variables['title'];
  $variables['title_background'] = '/themes/wilmap_theme/images/home/intro-image.png';
  $variables['title_back_link'] = '';

  // Contributor page
  if ($user = \Drupal::routeMatch()->getParameter('user')){
    $account = \Drupal\user\Entity\User::load($user->id());

    if ($file = $account->get('field_banner_image')->getValue()) {
      $file = \Drupal\file\Entity\File::load($file[0]['target_id']);
      $file_url = file_create_url($file->getFileUri());
    } else {
      $file_url = '/themes/wilmap_theme/images/title/default-title-bg.png';
    }

    $variables['title'] = $account->get('name')->value;
    $variables['title_background'] = $file_url;
    $variables['title_back_link'] = '<a href="/contributors" class="backtolink">Back to contributors</a>';
  }

  // Node pages
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $bundle = $node->bundle();

    switch ($bundle) {
      case 'wilmap_page':
        $primary_title = ($node->get('field_normal_title')->getValue()) ? $node->get('field_normal_title')->getValue()[0]['value'] : '';
        $secondary_title = ($node->get('field_secondary_title')->getValue()) ? '<span class="secondary-page-title">' . $node->get('field_secondary_title')->getValue()[0]['value'] . '</span>' : '';

        $variables['title'] = $secondary_title . '' . $primary_title;
        $variables['title_background'] = file_create_url($node->get('field_image')->entity->uri->value);
        $variables['title_back_link'] = '';

        break;

      case 'topics':
        $variables['title'] = '<span class="secondary-page-title">' . $node->label() . '</span>';
        $variables['title_background'] = ($node->get('field_thumbnail_topic')->getValue()) ?
                                         file_create_url($node->get('field_thumbnail_topic')->entity->uri->value) :
                                         '/themes/wilmap_theme/images/title/topics-title-bg.png';
        $variables['title_back_link'] = '<a href="/topics" class="backtolink">Back to topics</a>';

        break;

      case 'news':
        $variables['title'] = '<span class="secondary-page-title">' . $node->label() . '</span>';
        $variables['title_background'] = ($node->get('field_image')->getValue()) ?
                                         file_create_url($node->get('field_image')->entity->uri->value) :
                                         '/themes/wilmap_theme/images/title/news-title-bg.png';
        $variables['title_back_link'] = '<a href="/news" class="backtolink">Back to news</a>';

        break;

      case 'entry':
        $variables['title'] = $node->label();
        $variables['title_background'] = ($node->get('field_image_entry')->getValue()) ?
                                         file_create_url($node->get('field_image_entry')->entity->uri->value) :
                                         '/themes/wilmap_theme/images/title/news-title-bg.png';
        $variables['title_back_link'] = '<div class="node-top"></div>';

        break;

      default:
        $variables['title'] = $node->label();
        $variables['title_background'] = '/themes/wilmap_theme/images/title/default-title-bg.png';
        $variables['title_back_link'] = '';

        break;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function wilmap_theme_preprocess_maintenance_page(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for views fields.
 */
function wilmap_theme_preprocess_views_view_fields(&$variables) {
  $view = $variables['view'];

  if($view->id() == 'contributors') {
    $contributor_uid = intval(strip_tags($variables['fields']['uid']->content));
    $account = \Drupal\user\Entity\User::load($contributor_uid);

    $ranking_service = \Drupal::service('wilmap_contributors.ranking');
    $contributors = intval($ranking_service->getUserContributions($account->id()));
    $ranking = intval($ranking_service->getUserRanking($account->id()));

    $variables['fields']['contributions'] = ($contributors < 10 && $contributors != 0)?'0'.$contributors:$contributors;
    $variables['fields']['ranking'] = ($ranking < 10 && $ranking != 0)?'0'.$ranking:$ranking;
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function wilmap_theme_preprocess_node(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function wilmap_theme_preprocess_block(&$variables) {
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function wilmap_theme_preprocess_menu(&$variables) {
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function wilmap_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
}

function wilmap_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {

    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function wilmap_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    // Look for any form provided by the contact module.
    // If you want to target a specific form you'll use the whole form ID
    // (e.g. Website feedback = 'contact_message_feedback_form').
    if (strpos($form_id, 'contact_message_') !== FALSE) {
        $form['actions']['preview']['#access'] = FALSE;

        // Adds subject and message if there is a referrer URL
        if($referrer = \Drupal::request()->query->get('r')){
            $form['subject']['widget'][0]['value']['#default_value'] = t('Suggest contributor');
            $form['message']['widget'][0]['value']['#default_value'] = t('Suggest contributor for @link', array('@link' => $referrer));
        }


    }

    // Disable search_form autocomplete in node and users search
    // @see search_autocomplete.module
    if ($form_id == 'search_form') {
            unset($form['basic']['keys']['#autocomplete_configuration']);
    }

}

/**
 * Implements hook_theme_suggestions_user_alter().
 *
 *   An array of alternate, more specific names for template files or theme
 *   functions.
 */
function wilmap_theme_theme_suggestions_user_alter(&$suggestions, $vars, $hook) {

    // Define the view mode.
    $mode = $vars['elements']['#view_mode'];

    // Create a theme hook suggestion which has the view mode name in it.
    $suggestions[] = 'user__' . $mode;
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function wilmap_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}



